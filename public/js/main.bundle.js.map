{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/build/scripts/ts/main.ts"],"names":[],"mappings":"AAAA;;;ACGA,IAAI,MAAqB,SAAzB;AAIA,IAAM,eAAe,SAAf,YAAe,GAAK;AACtB,QAAI,QAAQ,SAAZ,EAAuB;AAEnB,YAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,mBAAO,IAAP;AACH;AAED,eAAO,GAAP,CAAW,kBAAX,GAAgC,sLAAhC;AAEA,cAAM,IAAI,OAAO,MAAX,CAAkB,iBAAlB,EACF;AAEI,uBAAW,OAAO,SAAP,CAAiB,OAFhC;AAQI,6BAAiB,IARrB;AAeI,2BAAe,IAAI,OAAO,qBAAX,EAfnB;AAkBI,sBAAU,IAlBd;AAmBI,uBAAW,IAnBf;AAoBI,qBAAS,IApBb;AAqBI,kCAAsB,IArB1B;AAsBI,8BAAkB,IAtBtB;AAuBI,sBAAU,IAvBd;AAwBI,qBAAS,IAxBb;AA0BI,wBAAY;AA1BhB,SADE,CAAN;AA+BA,gBAAQ,GAAR,CAAY,GAAZ;AAEH;AAED,QAAI,KAAJ,CAAU,KAAV,CAAgB,cAAhB,GAAiC,IAAjC;AACA,QAAI,KAAJ,CAAU,wBAAV,GAAqC,IAArC;AAGA,QAAI,MAAJ,CAAW,OAAO,mBAAlB,EAAuC,EAAvC;AAEA,QAAI,MAAJ,CAAW,IAAI,QAAf;AACH,CAnDD;AAqDA;AAEA,IAAI,QAAQ,SAAZ,EAAuB,CAwCtB","file":"main.bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// import * as bootstrap from 'bootstrap';\r\n// import * as Cesium from 'cesium';\r\n\r\nlet map: Cesium.Viewer = undefined;\r\n\r\n// let sandcastle: Sandcastle = undefined;\r\n\r\nconst createTheMap = () => {\r\n    if (map === undefined) {\r\n\r\n        if (typeof Cesium === 'undefined') {\r\n            return null;\r\n        }\r\n\r\n        Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI2OWIzMGMwMi00MDNiLTQzZDctYTllYi0wMWY3ZmE0MzJiNGIiLCJpZCI6NjQ4NTcsImlhdCI6MTYyOTY3Nzg3NH0.ziXwlRzgqUht9q9hGlCY3fm3R9eNqHzy-kf7QWDneYk';\r\n\r\n        map = new Cesium.Viewer('cesiumContainer',\r\n            {\r\n                //Start in Columbus Viewer\r\n                sceneMode: Cesium.SceneMode.SCENE3D,\r\n\r\n                //Use Cesium World Terrain\r\n                // terrainProvider: Cesium.createWorldTerrain(),\r\n\r\n                //Hide the base layer picker\r\n                baseLayerPicker: true,\r\n\r\n                // imageryProvider: new Cesium.TileMapServiceImageryProvider({\r\n                //   url: Cesium.buildModuleUrl(\"Assets/Textures/BingMapsAerial\"),\r\n                // }),\r\n\r\n                // Show Columbus View map with Web Mercator projection\r\n                mapProjection: new Cesium.WebMercatorProjection(),\r\n\r\n\r\n                timeline: true,\r\n                animation: true,\r\n                infoBox: true,\r\n                navigationHelpButton: true,\r\n                fullscreenButton: true,\r\n                geocoder: true,\r\n                shadows: true,\r\n\r\n                homeButton: true,\r\n\r\n            });\r\n\r\n        console.log(map);\r\n\r\n    }\r\n\r\n    map.scene.globe.enableLighting = true;\r\n    map.scene.debugShowFramesPerSecond = true;\r\n\r\n    //Add basic drag and drop functionality\r\n    map.extend(Cesium.viewerDragDropMixin, {});\r\n\r\n    map.zoomTo(map.entities);\r\n};\r\n\r\ncreateTheMap();\r\n\r\nif (map !== undefined) {\r\n    // var wyoming = map.entities.add({\r\n    //     name: 'Wyoming',\r\n    //     polygon: {\r\n    //         hierarchy: Cesium.Cartesian3.fromDegreesArray([\r\n    //             -109.080842, 45.002073,\r\n    //             -105.91517, 45.002073,\r\n    //             -104.058488, 44.996596,\r\n    //             -104.053011, 43.002989,\r\n    //             -104.053011, 41.003906,\r\n    //             -105.728954, 40.998429,\r\n    //             -107.919731, 41.003906,\r\n    //             -109.04798, 40.998429,\r\n    //             -111.047063, 40.998429,\r\n    //             -111.047063, 42.000709,\r\n    //             -111.047063, 44.476286,\r\n    //             -111.05254, 45.002073]),\r\n    //         height: 0,\r\n    //         material: Cesium.Color.RED.withAlpha(0.5),\r\n    //         outline: true,\r\n    //         outlineColor: Cesium.Color.BLACK\r\n    //     }\r\n    // });\r\n\r\n    // map.zoomTo(wyoming);\r\n    // Add Cesium OSM Buildings, a global 3D buildings layer.\r\n\r\n    // const buildingTileset = map.scene.primitives.add(\r\n    //     Cesium.createOsmBuildings()\r\n    // );\r\n\r\n    // Fly the camera to San Francisco at the given longitude, latitude, and height.\r\n\r\n    // map.camera.flyTo({\r\n    //     destination: Cesium.Cartesian3.fromDegrees(-122.4175, 37.655, 400),\r\n    //     orientation: {\r\n    //         heading: Cesium.Math.toRadians(0.0),\r\n    //         pitch: Cesium.Math.toRadians(-15.0),\r\n    //     }\r\n    // });\r\n}\r\n\r\n// const options = {\r\n//   camera: map.scene.camera,\r\n//   canvas: map.scene.canvas,\r\n// };\r\n\r\n// sandcastle.addToolbarMenu(\r\n//   [\r\n//     {\r\n//       text: \"KML - Global Science Facilities\",\r\n//       onselect: function () {\r\n//         map.camera.flyHome(0);\r\n//         map.dataSources.add(\r\n//           Cesium.KmlDataSource.load(\r\n//             \"../SampleData/kml/facilities/facilities.kml\",\r\n//             options\r\n//           )\r\n//         );\r\n//       },\r\n//     },\r\n//     {\r\n//       text: \"KMZ with embedded data - GDP per capita\",\r\n//       onselect: function () {\r\n//         map.camera.flyHome(0);\r\n//         map.dataSources.add(\r\n//           Cesium.KmlDataSource.load(\r\n//             \"../SampleData/kml/gdpPerCapita2008.kmz\",\r\n//             options\r\n//           )\r\n//         );\r\n//       },\r\n//     },\r\n//     {\r\n//       text: \"gx KML extensions - Bike Ride\",\r\n//       onselect: function () {\r\n//         map.dataSources\r\n//           .add(\r\n//             Cesium.KmlDataSource.load(\r\n//               \"../SampleData/kml/bikeRide.kml\",\r\n//               options\r\n//             )\r\n//           )\r\n//           .then(function (dataSource) {\r\n//             map.clock.shouldAnimate = false;\r\n//             var rider = dataSource.entities.getById(\"tour\");\r\n//             map.flyTo(rider).then(function () {\r\n//               map.trackedEntity = rider;\r\n//               map.selectedEntity = map.trackedEntity;\r\n//               map.clock.multiplier = 30;\r\n//               map.clock.shouldAnimate = true;\r\n//             });\r\n//           });\r\n//       },\r\n//     },\r\n//   ],\r\n//   \"toolbar\"\r\n// );\r\n\r\n// sandcastle.reset = function () {\r\n//   map.dataSources.removeAll();\r\n//   map.clock.clockRange = Cesium.ClockRange.UNBOUNDED;\r\n//   map.clock.clockStep = Cesium.ClockStep.SYSTEM_CLOCK;\r\n// };\r\n\r\n\r\n\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}